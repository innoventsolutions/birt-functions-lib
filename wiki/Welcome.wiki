#summary Welcome to the BIRT Script Library Project.

= Introduction =

BIRT extension points allow you to customize your report development environment.  Two of the most powerful and easiest extension points are dedicated to the creation of new functions in BIRT.  The aggregate extension point and script function extension point allow developers to create new functions that are integrated into the report development UI.

This project provides an example of how to create new BIRT function extensions.  In addition, the functions that have been created will have real world use in your projects.  

This project is brought to you by Innovent Solutions through a generous donation of code from Blackboard, Inc.  If you have questions or are interested in contributing please contact us at info(at)innoventsolutions(dot)com and we will get back to you.

= Details =

This project creates a single Eclipse plugin project.  The binary for the project can be downloaded (needs to be setup), or the project source can be checked out from our Google Code repository.

= Extensions =
There are two main sections to this project: the aggregate functions and the script extensions.  
== Aggregates ==
Aggregate functions are performed across a number of rows.  Aggregate extensions show up in the Aggregate Editor and fully support all of the grouping and filtering options that the standard aggregates support.
=== ConcatenateUnique ===
Shows the unique text values that have been accumulated within a grouping.
=== CountUnique ===
Counts how many unique values show up in a given field.

== Script Functions ==
Script functions show up in the report designer in a number of places.  On the Script tab, when you look in the palette view, you will find any Script extensions showing up on the Palette view, in the BIRT Functions area.  

All of the functions for this project are placed under a CustomFunctions category.  

=== AppendLibraryContent ===
Allows a developer to programmatically add a ReportItem in a library to the end of a report design.  

=== BindParameters ===
BIRT parameter handling in DataSets presents a few challenges.  Particularly when working with multi-select parameters.  This function simplifies the use of parameters in BIRT ODA DataSets.  You will no longer need to bind your parameters on a separate tab, and using multi-select parameters is as easy as writing
{{{
select * from customers 
where 0=0 
/* BIND and state in ($param_states) */
}}}

=== BirtLogger ===
Presents a standard way of adding logging statements to your BIRT JavaScript.

=== DisplayParameters ===
When working with report designs, it is often useful to know what parameters were passed to a report.  Use this function to dynamically add all of the parameter information to the top of your report.
{{{
CustomFunctions.DisplayParameters(reportContext)
}}}
=== SetChartPalette ===
BIRT Charts use a palette for each series item.  The standard color palette is adequate but often does not match the official corporate color scheme.  Adopting an alternate color scheme requires significant UI re-work on each chart.

This control allows you to tie your chart series fill and font properties to match styles that have been setup in your CSS files.

=== TextWrap ===
A simple control that will wrap text at developers specified break point.

=== ThrowException ===
Allows BIRT JavaScript code to create an error message in the report.  These error messages will show up as standard BIRT exceptions.  Gives the report developer the ability to fail gracefully.